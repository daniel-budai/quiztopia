# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: danielbudai
# "service" is the name of this project. This will also be added to your AWS resource names.
service: quiztopia

stages:
  default:
    params:
      accountsTable: "accounts-table-${sls:stage}"
      quizzesTable: "quizzes-table-${sls:stage}"
      questionsTable: "questions-table-${sls:stage}"
      leaderboardTable: "leaderboards-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-north-1

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [AccountsTable, Arn]
            - Fn::GetAtt: [QuizzesTable, Arn]
            - Fn::GetAtt: [QuestionsTable, Arn]
            - Fn::GetAtt: [LeaderboardTable, Arn]
  environment:
    ACCOUNTS_TABLE: ${param:accountsTable}
    QUIZZES_TABLE: ${param:quizzesTable}
    QUESTIONS_TABLE: ${param:questionsTable}
    LEADERBOARD_TABLE: ${param:leaderboardTable}
    JWT_SECRET: "din_hemliga_nyckel"

functions:
  signup:
    handler: src/functions/User/signup/signup.handler
    events:
      - httpApi:
          path: /signup
          method: post

  login:
    handler: src/functions/User/login/login.handler
    events:
      - httpApi:
          path: /login
          method: post

  createQuiz:
    handler: src/functions/Quiz/Create/createQuiz.handler
    events:
      - httpApi:
          path: /quizzes
          method: post

  addQuestion:
    handler: src/functions/Quiz/Questions/addQuestion.handler
    events:
      - httpApi:
          path: /quizzes/{quizId}/questions
          method: post

  getAllQuizzes:
    handler: src/functions/Quiz/Retrive/getAllQuizzes.handler
    events:
      - httpApi:
          path: /quizzes
          method: get

  deleteQuiz:
    handler: src/functions/Quiz/Delete/deleteQuiz.handler
    events:
      - httpApi:
          path: /quizzes/{quizId}
          method: delete

  getQuestionsByQuizId:
    handler: src/functions/Quiz/Questions/getQuestionsByQuizId.handler
    events:
      - httpApi:
          path: /quizzes/{quizId}/questions
          method: get

  getLeaderboard:
    handler: src/functions/Quiz/Leaderboard/Get/getLeaderboard.handler
    events:
      - httpApi:
          path: /quizzes/{quizId}/leaderboard
          method: get

  addScoreToLeaderboard:
    handler: src/functions/Quiz/Leaderboard/Add/addScoreToLeaderboard.handler
    events:
      - httpApi:
          path: /quizzes/{quizId}/play
          method: post

resources:
  Resources:
    AccountsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:accountsTable}
        AttributeDefinitions:
          - AttributeName: accountId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: accountId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UsernameIndex
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    QuizzesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: quizId
            AttributeType: S
          - AttributeName: accountId
            AttributeType: S
        KeySchema:
          - AttributeName: quizId
            KeyType: HASH
          - AttributeName: accountId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:quizzesTable}

    QuestionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: questionId
            AttributeType: S
          - AttributeName: quizId
            AttributeType: S
        KeySchema:
          - AttributeName: questionId
            KeyType: HASH
          - AttributeName: quizId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: QuizIdIndex
            KeySchema:
              - AttributeName: quizId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:questionsTable}

    LeaderboardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: quizId
            AttributeType: S
          - AttributeName: accountId
            AttributeType: S
          - AttributeName: score
            AttributeType: N
        KeySchema:
          - AttributeName: quizId
            KeyType: HASH
          - AttributeName: accountId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: QuizScoreIndex
            KeySchema:
              - AttributeName: quizId
                KeyType: HASH
              - AttributeName: score
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:leaderboardTable}
